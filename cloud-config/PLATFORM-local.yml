server:
  port: 8080

logging:
  config: classpath:log4j2.xml

#actuator配置
management:
  endpoint:
    restart:
      enabled: true
    health:
      show-details: always
  endpoints:
    web:
      exposure:  #暴露哪些端点
        include: "health,httptrace,info,metrics,heapdump,refresh,restart,bus-refresh"
  security:
    enabled: false     #SpringBoot 1.5.X 以上默认开通了安全认证，如果不关闭会要求权限

spring:
  application:
    name: PLATFORM
  boot: #admin不监控consul服务
    admin:
      discovery:
        ignored-services: consul
  cloud:    #注册中心配置
    consul:
      host: 127.0.0.1
      port: 8500
      discovery:
        register: true
        service-name: ${spring.application.name}
        prefer-ip-address: true
        instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}
        tags: dev
        health-chcek-path: /actuator/health
        health-check-critical-timeout: 30s
        health-check-interval: 15s
  #数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://10.10.38.195:4406/ctms
    username: root
    password: 123456
    druid:
      # 连接池的配置信息
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      # 配置DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: "/*"
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
      # 配置DruidStatViewServlet
      stat-view-servlet:
        url-pattern: "/druid/*"
        # IP白名单(没有配置或者为空，则允许所有访问)
        allow: 127.0.0.1,192.168.163.1
        # IP黑名单 (存在共同时，deny优先于allow)
        deny: 192.168.1.73
        #  禁用HTML页面上的“Reset All”功能
        reset-enable: false
        # 登录名
        login-username: admin
        # 登录密码
        login-password: admin
  # yml配置的优先级高于java配置；如果yml配置和java配置同时存在，则yml配置会覆盖java配置
  http-client:
    pool:
      #连接池的最大连接数，0代表不限；如果取0，需要考虑连接泄露导致系统崩溃的后果
      maxTotalConnect: 1000
      #每个路由的最大连接数,如果只调用一个地址,可以将其设置为最大连接数
      maxConnectPerRoute: 200
      # 指客户端和服务器建立连接的超时时间,ms , 最大约21秒,因为内部tcp在进行三次握手建立连接时,默认tcp超时时间是20秒
      connectTimeout: 3000
      # 指客户端从服务器读取数据包的间隔超时时间,不是总读取时间,也就是socket timeout,ms
      readTimeout: 5000
      # 从连接池获取连接的timeout,不宜过大,ms
      connectionRequestTimout: 200
      # 重试次数
      retryTimes: 3
      charset: UTF-8
      # 长连接保持时间 单位s,不宜过长
      keepAliveTime: 10
      # 针对不同的网址,长连接保持的存活时间,单位s,如果是频繁而持续的请求,可以设置小一点,不建议设置过大,避免大量无用连接占用内存资源
      keepAliveTargetHost:
        www.baidu.com: 5

#Feign的调用分两层，即Ribbon层的调用和Hystrix的调用，高版本的Hystrix默认是关闭的
feign:  #feign底层使用HttpClient 自动配置默认参数  //参考：FeignHttpClientProperties
  httpclient:
    enabled: true
    maxConnections: 200
    maxConnectionsPerRoute: 50
    connectionTimeout: 2000
    connectionTimerRepeat: 3000

#Ribbon配置
ribbon:
  ServerListRefreshInterval: 30000   #每30s执行一次服务列表更新任务 (应用启动后延迟1s执行定时更新服务列表的任务)
  # 默认相同的route不重试,可以避免一些各种重试引起的问题，简单化(但服务提供方还是应该尽量保证幂等性)
  MaxAutoRetries: 0
  # 默认只重试不同route一次
  MaxAutoRetriesNextServer: 1
  # 由于在前面feign文档中已经讲到使用自己配置的HttpClient连接池,所以不需要配置ribbon连接池相关的任何属性(因为考虑到每个服务提供方的不同，后期可能会更改回来使用ribbon连接池方式)
  # 默认5000
  ReadTimeout: 5000
  # 默认2000
  ConnectTimeout: 2000
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #配置规则 随机
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #配置规则 轮询
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule #配置规则 重试
  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule #配置规则 响应时间权重
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #配置规则 最空闲连接策
  # 后续可能会自定义一些负载均衡策略,通过这里来设置
  # ribbon子容器饥饿加载,避免偶尔因为服务重启后第一次发起请求时延迟加载耗时造成fallback,但是会增加系统启动时间(新版才支持)
  eager-load:
    enabled: true
    clients:
      - a
      - b
      - c
#一个客户端远程多个微服务，可针对单个微服务做特殊配置
# ribbon客户端名称(即feign客户端名称)
<clientName>:
  ribbon:
    listOfServers: www.baidu.com
    xxx: xxx

#断路器
hystrix:
  command:
    default:
      circuitBreaker:
        # 是否开启熔断(默认true)
        enabled: true
        # 熔断生效至少请求数量(默认20),当同一HystrixCommand请求数量低于此值时,熔断不会开启
        requestVolumeThreshold: 20
        # 失败次数超过比例才开启熔断
        errorThresholdPercentage: 50
        # 强制开启熔断
        #forceOpen： true
        # 强制关闭熔断
        #forceClosed: true
      execution:
        isolation:
          # THREAD:单独开启线程执行;#SEMAPHORE:在调用线程上执行(由于我们现有框架中FeignUserContextInterceptor中使用了ThreadLocal,所以必须使用第二种方式)
          strategy: SEMAPHORE
          thread:
            # 执行超时时间(这个时间设置很重要,因为HystrixCommand会包装RibbonClient实例,那么这个时间就必须要大于ribbion timeout * retry
            timeoutInMilliseconds: 2000
          semaphore:
            # 由于我们使用SEMAPHORE模式,当每个feign并发发起请求超过此值时,请求会被拒绝,直接调用降级方法,异常信息关键字:could not acquire a semaphore for execution
            maxConcurrentRequests: 1000
      fallback:
        isolation:
          semaphore:
            # 由于我们使用SEMAPHORE模式，当每个feign并发发起请求调用降级方法超过此值,调用降级方法会被拒绝,直接抛出异常,异常信息关键字:fallback execution rejected
            maxConcurrentRequests: 1000

#Mybatis配置
mybatis:
  configuration:
    mapUnderscopeToCamelCase: true   #驼峰命名
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
  mapper-locations: classpath:mapper/*.xml     #mapper映射文件位置
  #type-aliases-package: com/zsl/cloud/platform/bean   #别名处理对应包
  #config-location: classpath:mybatis-config.xml  #全局配置文件位置

neo:
  hello: hello update xxx1111zzz
